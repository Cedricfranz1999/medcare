generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String   @default("ADMIN")
  username  String
  password  DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model user {
  id            Int              @id @default(autoincrement())
  username      String
  password      DateTime         @default(now())
  name          String
  middleName    String?
  lastName      String?
  DateOfBirth   String
  age           String?
  address       String?
  contactNumber String?
  status        UserStatus       @default(PENDING) 
  updatedAt     DateTime         @updatedAt
  createdAt     DateTime         @default(now())

  carts         MedicineCart[]
  requests      MedicineRequestor[]
  isAlreadyRegisteredIn0auth    Boolean @default(false)
}


model Medicine {
  id           Int                @id @default(autoincrement())
  image        String?
  name         String
  brand        String
  description  String?
  type         MedicineType
  dosageForm   DosageForm
  size         String?
  stock        Int       
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  categoryId   Int?
  category     MedicineCategory?  @relation(fields: [categoryId], references: [id])

  carts        MedicineCart[]
  requests     MedicineRequestor[]

  uses         MedicineUse[]      @relation("MedicineToUse")
}

model MedicineUse {
  id          Int         @id @default(autoincrement())
  name        String      @unique

  medicines   Medicine[]  @relation("MedicineToUse")
}


model MedicineCategory {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  medicines  Medicine[]
}




model MedicineCart {
  id          Int       @id @default(autoincrement())
  user        user      @relation(fields: [userId], references: [id])
  userId      Int
  medicine    Medicine  @relation(fields: [medicineId], references: [id])
  medicineId  Int
  quantity    Int
  isRequested Boolean   @default(false)
  addedAt     DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MedicineRequestor {
  id          Int         @id @default(autoincrement())
  user        user        @relation(fields: [userId], references: [id])
  userId      Int
  medicine    Medicine    @relation(fields: [medicineId], references: [id])
  medicineId  Int
  quantity    Int
  status      RequestStatus @default(REQUESTED)
  requestedAt DateTime    @default(now())
  approvedAt  DateTime?
  givenAt     DateTime?
  cancelledReason String?
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())
}

enum MedicineType {
  OTC
  PRESCRIPTION
}

enum RequestStatus {
  REQUESTED
  APPROVED
  GIVEN
  CANCELLED
}

enum DosageForm {
  TABLET
  SYRUP
  CAPSULE
  INJECTION
  CREAM
  DROPS
}

enum UserStatus {
  PENDING
  APPROVED
  DEACTIVE
}
