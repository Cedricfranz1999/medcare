generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String   @default("ADMIN")
  username  String   @unique
  password  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model user {
  id                         Int                 @id @default(autoincrement())
  username                   String              @unique
  password                   String?
  name                       String
  middleName                 String?
  lastName                   String?
  email                      String?             @unique
  googleId                   String?             @unique
  image                      String?
  DateOfBirth                String?
  age                        String?
  address                    String?
  contactNumber              String?
  status                     UserStatus          @default(PENDING)
  updatedAt                  DateTime            @updatedAt
  createdAt                  DateTime            @default(now())
  isAlreadyRegisteredIn0auth Boolean             @default(false)
  carts                      MedicineCart[]
  requests                   MedicineRequestor[]

  @@index([status])
  @@index([email])
  @@index([googleId])
}

model Medicine {
  id           Int                          @id @default(autoincrement())
  image        String?
  name         String
  brand        String
  description  String?
  type         MedicineType
  dosageForm   DosageForm
  size         String?
  stock        Int
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt
  recommended  Boolean                      @default(false)
  expiryDate   DateTime?
  carts        MedicineCart[]
  categories   MedicineCategoryOnMedicine[]
  requestItems MedicineRequestItem[]

  @@index([name])
  @@index([brand])
  @@index([type])
}

model MedicineCategory {
  id        Int                          @id @default(autoincrement())
  name      String                       @unique
  createdAt DateTime?                    @default(now())
  medicines MedicineCategoryOnMedicine[]
}

model MedicineCategoryOnMedicine {
  medicineId Int
  categoryId Int
  assignedAt DateTime         @default(now())
  category   MedicineCategory @relation(fields: [categoryId], references: [id])
  medicine   Medicine         @relation(fields: [medicineId], references: [id], onDelete: Cascade)

  @@id([medicineId, categoryId])
}

model MedicineCart {
  id         Int      @id @default(autoincrement())
  userId     Int
  medicineId Int
  quantity   Int
  addedAt    DateTime @default(now())
  updatedAt  DateTime @updatedAt
  medicine   Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  user       user     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([medicineId])
}

model MedicineRequestor {
  id              Int                   @id @default(autoincrement())
  userId          Int
  reason          String
  status          RequestStatus         @default(REQUESTED)
  requestedAt     DateTime              @default(now())
  approvedAt      DateTime?
  givenAt         DateTime?
  cancelledReason String?
  updatedAt       DateTime              @updatedAt
  createdAt       DateTime              @default(now())
  medicines       MedicineRequestItem[]
  user            user                  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model MedicineRequestItem {
  id         Int               @id @default(autoincrement())
  requestId  Int
  medicineId Int
  quantity   Int
  medicine   Medicine          @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  request    MedicineRequestor @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([requestId, medicineId])
  @@index([requestId])
  @@index([medicineId])
}

enum MedicineType {
  OTC
  PRESCRIPTION
}

enum RequestStatus {
  REQUESTED
  GIVEN
  CANCELLED
}

enum DosageForm {
  TABLET
  SYRUP
  CAPSULE
  INJECTION
  CREAM
  DROPS
}

enum UserStatus {
  PENDING
  APPROVED
  DEACTIVE
}
