generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String   @default("ADMIN")
  username  String   @unique
  password  String   
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model user {
  id            Int              @id @default(autoincrement())
  username      String           @unique
  password      DateTime         @default(now())
  name          String
  middleName    String?
  lastName      String?
  image         String?
  DateOfBirth   String
  age           String?
  address       String?
  contactNumber String?
  status        UserStatus       @default(PENDING) 
  updatedAt     DateTime         @updatedAt
  createdAt     DateTime         @default(now())

  carts         MedicineCart[]
  requests      MedicineRequestor[]
  isAlreadyRegisteredIn0auth Boolean @default(false)

  @@index([status])
}

model Medicine {
  id           Int                @id @default(autoincrement())
  image        String?
  name         String
  brand        String
  description  String?
  type         MedicineType
  dosageForm   DosageForm
  size         String?
  stock        Int       
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  recommended  Boolean            @default(false)

  categories   MedicineCategoryOnMedicine[]
  carts        MedicineCart[]
  requestItems MedicineRequestItem[] 

  @@index([name])
  @@index([brand])
  @@index([type])
}


model MedicineCategory {
  id         Int                        @id @default(autoincrement())
  name       String                     @unique
  medicines  MedicineCategoryOnMedicine[]
  createdAt    DateTime?           @default(now())
}

model MedicineCategoryOnMedicine {
  medicine   Medicine         @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  medicineId Int
  category   MedicineCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  assignedAt DateTime         @default(now())

  @@id([medicineId, categoryId])
}


model MedicineCart {
  id         Int       @id @default(autoincrement())
  user       user      @relation(fields: [userId], references: [id])
  userId     Int
  medicine   Medicine  @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  medicineId Int
  quantity   Int
  addedAt    DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([medicineId])
}

model MedicineRequestor {
  id              Int                     @id @default(autoincrement())
  user            user                    @relation(fields: [userId], references: [id])
  userId          Int
  reason          String
  status          RequestStatus           @default(REQUESTED)
  requestedAt     DateTime                @default(now())
  approvedAt      DateTime?
  givenAt         DateTime?
  cancelledReason String?
  updatedAt       DateTime                @updatedAt
  createdAt       DateTime                @default(now())

  medicines       MedicineRequestItem[]   // <-- new relation

  @@index([userId])
  @@index([status])
}

model MedicineRequestItem {
  id         Int                @id @default(autoincrement())
  request    MedicineRequestor @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId  Int
  medicine   Medicine          @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  medicineId Int
  quantity   Int

  @@index([requestId])
  @@index([medicineId])
  @@unique([requestId, medicineId])
}


enum MedicineType {
  OTC
  PRESCRIPTION
}

enum RequestStatus {
  REQUESTED
  GIVEN
  CANCELLED
}

enum DosageForm {
  TABLET
  SYRUP
  CAPSULE
  INJECTION
  CREAM
  DROPS
}

enum UserStatus {
  PENDING
  APPROVED
  DEACTIVE
}
